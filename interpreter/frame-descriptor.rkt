#lang racket
;(require )

(provide (all-defined-out))
; all arguments, locals and internal variables used in a method
(define frame-descriptor%
  (class object%
    (init-field [defaultValue #f] [lock #f])
    (field [slots '()] [size 0] [identifierToSlotMap (make-hash)] [version #f] [identifierToNotInFrameAssumptionMap (make-hash)])
    (super-new)
    (define/public (getSize) size)
    (define/public (getSlots) slots)
    (define/public (getIdentifiers) (hash->list identifierToSlotMap))
    (define/public (getVersion) version)
    (define/public (getDefaultValue) defaultValue)
    (define/public (getNotInFrameAssumption id)
      (when (not (null? (hash-ref identifierToSlotMap id '())))
        (error " cannot get not-in-frame assumption for existing frame slot"))
      (if (null? identifierToNotInFrameAssumptionMap)
          (set! identifierToNotInFrameAssumptionMap (make-hash))
          (let ([assumption (hash-ref identifierToNotInFrameAssumptionMap id '())])
            (if (null? assumption)
                (begin (set! assumption (createAssumption)) assumption)
                assumption))))

    (define/public (addFrameSlot identifier info kind)
      (when (or (null? identifier) (null? kind))
        (error "addFrameslot identifier or kind cannot be null"))
      (when (not (equal? #f (hash-ref identifierToSlotMap identifier #f)))
                 (error (string-append "duplicate frame slot " identifier)))
      (define slot (new frame-slot% [descriptor this] [identifier identifier] [info info] [kind kind] [index size]))
      (set! size (+ size 1))
      (set! slots (cons slot slots))
      (hash-set! identifierToSlotMap identifier slot)
      (updateVersion)
      (invalidateNotInFrameAssumption identifier)
      slot
      )
    (define/public (findFrameSlot id) (hash-ref identifierToSlotMap id '()))
    (define/public (findOrAddFrameSlot id info kind)
      (let ([result (findFrameSlot id)])
        (if (null? result)
            (addFrameSlot id info kind)
            result)))
    (define/public (removeFrameSlot id)
      (let ([slot (hash-ref identifierToSlotMap id '())])
        (when (null? slot) (error (string-append "no such frame slot " id)))
        (set! slots (remove slot slots))
        (hash-remove! identifierToSlotMap id)
        (updateVersion)
        (getNotInFrameAssumption id)
        ))
    (define/public (getFrameSlotKind frameslot) (get-field kind frameslot))
    (define/public (setFrameSlotKind frameslot knd)
      (when (not (equal? (getFrameSlotKind frameslot) knd))
        (invalidateVersion)
        (set-field! kind frameslot knd)
        (newVersion)))
    (define/public (updateVersion)
      (invalidateVersion this)
      (newVersion this))
    (define/public (newVersion)
      (set! version(createAssumption "frame version")))
    (define/public (invalidateVersion) (send version invalidate))
    (define/public (invalidateNotInFrameAssumption id)
      (when (not (null? identifierToNotInFrameAssumptionMap))
        (let ([assumption (hash-ref identifierToNotInFrameAssumptionMap id '())])
            (when (not (null? assumption))
                (hash-remove! identifierToNotInFrameAssumptionMap id)))))
    (define (createAssumption name)
      (new assumption% [name name]));;fixme
    ))
(define frame-slot%
  (class object%
    (init-field descriptor identifier info kind index)
    (super-new)
    (define/public (getIdentifieir) identifier)
    (define/public (getInfo) info)
    (define/public (getIndex) index)
    (define/public (getKind) kind)
    (define/public (getDescriptor) descriptor)))
(define assumption%
  (class object%
    (init-field name [valid #t])
    (super-new)
    (define/public (check) (void))
    (define/public (isValid) (void))
    (define/public (invalidate) (void))
    (define/public (getName) name)))